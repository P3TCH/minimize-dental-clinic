name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  Setup:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setting environment
        run: |
          pwd
          ls -a
          sudo apt install screen -y
          
      - name: Setup docker network
        run: docker network create --subnet=10.2.0.0/16 server

      - name: Start mariadb
        run: |
          
          docker run --network server --ip 10.2.0.2 -e MYSQL_ROOT_PASSWORD=123456 --name mydb -d mariadb:latest
          docker ps -a
          touch setup
          sudo service mysql start
          echo 'docker exec -i mydb mysql -e "CREATE DATABASE dentist" -p123456' >> setup
          echo 'docker exec -i mydb mysql -e "FLUSH PRIVILEGES" -p123456' >> setup
          echo 'docker exec -i mydb mysql -u root -p123456 dentist < /home/runner/work/minimize-dental-clinic/minimize-dental-clinic/dentist.sql' >> setup
          bash setup
          echo 'Started service'

      - name: Start server
        run: |
          cd  /home/runner/work/minimize-dental-clinic/minimize-dental-clinic/server
          npm install
          npm start
          pwd
          touch checkserver
          echo 'if screen -ls | grep mini | wc -l | grep 1; then' >> checkserver
          echo '  printf "\e[1;32m\n\n\n\n     SERVER STARTED!!!     \n\n\n\n\n \e[0m"' >> checkserver
          echo 'else' >> checkserver
          echo '  printf "\e[1;31m\n\n\n\n     SERVER FAILED TO START!!!     \n\n\n\n\n \e[0m"' >> checkserver
          echo 'fi' >> checkserver
          bash checkserver
      
      - name: Test backend
        run: |
          cd /home/runner/work/minimize-dental-clinic/minimize-dental-clinic/backendtest
          npm install
          npm test

      - name: Configure AWS credentials
        if: success()
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: push aws
        if: success()
        run: aws ec2 run-instances --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=\"$(date +'%Y-%m-%d_%H:%M')\"}]" --image-id ${{ secrets.AWS_REDHAT_OS }} --instance-type t2.micro  --key-name ${{ secrets.AWS_KEYPAIR_NAME }} --security-group-ids ${{ secrets.AWS_SECURITY_GROUP }} --user-data file://installredhat.sh


